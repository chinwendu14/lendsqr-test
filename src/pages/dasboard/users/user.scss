@use "../../../styles/" as *;
.users {
  // overflow: hidden;
  h3 {
    color: $secondary;
    margin-bottom: 40px;
    font-size: 25px;
    font-weight: 600;
  }
  .users__tableDiv {
    margin-top: 50px;
    width: 100%;
    box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.2);
    padding: 0px 0px 0px 20px;
    border-radius: 5px;
    background-color: white;
    position: relative;
    table {
      border-spacing: 0 1rem;
      border-collapse: separate;
      width: 100%;
      tbody {
        tr {
          border: 1px solid #213f7d1a;
          position: relative;
        }
      }
      thead {
        th {
          i {
            svg {
              padding-top: 2px;
              margin-left: 3px;
            }
          }
        }
      }
      th {
        font-size: 14px;
      }
      td,
      th {
        padding: 0 10px;
        text-align: left;
      }
      td {
        font-size: 14px;
        border-bottom: 1px solid #213f7d1a;
        .Inactive {
          background-color: #545f7d26;
          border-radius: 20px;
          margin-bottom: 10px;
          text-align: center;
          padding: 10px 13px;
        }
        .Active {
          border-radius: 20px;
          padding: 10px 13px;
          background-color: #39cd6324;
          margin-bottom: 10px;
          text-align: center;
        }
        .pending {
          border-radius: 20px;
          padding: 10px 13px;
          text-align: center;
          background-color: #e9b3001b;
        }
        .Blacklisted {
          text-align: center;
          border-radius: 20px;
          padding: 10px 13px;
          margin-bottom: 10px;
          background-color: #e4033b1a;
        }
      }
    }

    .users__dotDiv {
      position: absolute;
      box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.2);
      padding: 0px 0px 0px 20px;
      border-radius: 5px;
      background-color: white;
      padding: 10px 10px;
      transform: scaleY(0.00000001);
      z-index: 19;
      transform-origin: top;
      transition: 0.5s ease-in-out;
      width: 15%;
      p {
        display: flex;
        padding: 5px 0;
        cursor: pointer;

        i {
          margin-right: 10px;
        }
      }
    }
    .users__searchDivContainer {
      //   width: 30%;
      position: absolute;
      box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.2);
      padding: 0px 0px 0px 20px;
      border-radius: 5px;
      background-color: white;
      top: 50px;
      padding: 20px;
      transform: scaleY(0.00000001);
      z-index: 9;
      transform-origin: top;
      transition: 0.5s ease-in-out;
      select {
        box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.2);
        width: 100%;
        border: none;
        height: 40px;
        border-radius: 5px;
        color: black;
      }
      .hidde__placeholder {
        input {
          &::placeholder {
            visibility: hidden;
          }
        }
      }
      .users__btnDiv {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-top: 20px;
        .reset {
          padding: 10px 25px;
          border-radius: 5px;
          border: 1px solid black;
        }
        .filter {
          padding: 10px 25px;
          border-radius: 5px;
          border: none;
          background-color: $primary;
          color: white;
        }
      }
    }
    .show {
      transform: scaleY(1);
    }
    .showdot {
      transform: scaleY(1) translateX(-84%);
    }
  }

  .users__paginationShowContainer {
    margin-top: 20px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    .users__showContainer {
      display: flex;
      align-items: center;
      .users__paragraph {
        display: flex;
        align-items: center;
        background-color: rgba(0, 0, 0, 0.106);
        border-radius: 5px;
        padding: 4px 10px;
        margin: 0 14px;
      }
    }

    .users__paginationContainer {
      .pagination {
        display: flex;
        align-items: flex-end;
        justify-content: flex-end;

        list-style: none;
      }
      .page-item {
        margin: 0 10px;
        padding: 5px 10px;
        &:hover {
          background-color: #efd5d5;
        }
      }
      .page-prev {
        padding: 5px 10px;
        border-radius: 5px;
        box-shadow: 0px 4px rgba(0, 0, 0, 0.5);
        background-color: rgba(0, 0, 0, 0.079);
      }
      .active {
        background-color: white;
        border-radius: 5px;
        color: black;
      }
    }
  }
}

@include maxWidth(770px) {
  .users {
    .users__tableDiv {
      table {
        td {
          font-size: 16px;
        }
      }
    }
    .users__paginationShowContainer {
      flex-direction: column;
      align-items: flex-start;
      .users__showContainer {
        margin-bottom: 13px;
      }
    }
  }
}
@include maxWidth(1120px) {
  .users {
    .users__tableDiv {
      overflow-x: scroll;
    }
    .users__paginationShowContainer {
      align-items: flex-start;
      flex-direction: column;
      .users__showContainer {
        margin-bottom: 13px;
      }
    }
  }
}

// import Users from "./Users";
// import { render, } from "@testing-library/react";
// fireEvent, screen
// import axios from "axios";
// waitFor,
// import { BASE_URL } from "../../../config";
// import { MemoryRouter as Router } from "react-router-dom";
// import axios from "axios";
// test("show error message wwhen fields are not enter", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const element: HTMLElement[] = screen.getAllByTestId("card");
//   expect(element).toBeInTheDocument();
// });
// test("show div content", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const element: any = screen.getAllByTestId("showsearchdiv");
//   expect(element).not.toBeInTheDocument();
//   fireEvent.click(element);
//   expect(element).toBeInTheDocument();
// });
// test("show dot div content", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const element: any = screen.getAllByTestId("showDotdiv");
//   expect(element).not.toBeInTheDocument();
//   fireEvent.click(element);
//   expect(element).toBeInTheDocument();
// });

// const dummyTodos = [
//   {
//     userId: 1,
//     id: 1,
//     title: "todo 1",
//     completed: false,
//   },
//   {
//     userId: 1,
//     id: 2,
//     title: "todo 2",
//     completed: false,
//   },
//   {
//     userId: 1,
//     id: 3,
//     title: "todo 3",
//     completed: false,
//   },
// ];

// axios.get.mockResolvedValue({ data: dummyTodos });
// jest.mock("axios");

// test("todos list", async () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );

//   const users = [
//     { id: 1, name: "John" },
//     { id: 2, name: "Andrew" },
//   ];
//   (axios.get as jest.Mock).mockResolvedValue(users);

//   const result = await Users();

//   expect(axios.get).toHaveBeenCalledWith(`${BASE_URL}/users`);
//   expect(result).toEqual(users);

// const todoList =  waitFor(() => screen.findAllByTestId("todo"));
// expect(todoList).toHaveLength(3);

//   const response = await axios.get("/users");
//   expect(response.status).toEqual(200);
//   expect(response.data).toHaveLength(100);
// });

// test("check if select organisation input element exist", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const inputEmail: HTMLInputElement =
//     screen.getByPlaceholderText("organisation");
//   expect(inputEmail).toBeInTheDocument();
// });
// test("check if user can input organisation", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const inputEmail: HTMLInputElement =
//     screen.getByPlaceholderText("organisation");
//   fireEvent.change(inputEmail, { target: { value: "organisation" } });
//   expect(inputEmail.value).toBe("organisation");
// });
// test("check if username input element exist", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const inputEmail: HTMLInputElement = screen.getByPlaceholderText("username");
//   expect(inputEmail).toBeInTheDocument();
// });
// test("check if user can input username", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const inputEmail: HTMLInputElement = screen.getByPlaceholderText("username");
//   fireEvent.change(inputEmail, { target: { value: "username" } });
//   expect(inputEmail.value).toBe("username");
// });
// test("check if email input element exist", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const inputEmail: HTMLInputElement = screen.getByPlaceholderText("email");
//   expect(inputEmail).toBeInTheDocument();
// });
// test("check if user can input email", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const inputEmail: HTMLInputElement = screen.getByPlaceholderText("email");
//   fireEvent.change(inputEmail, { target: { value: "email" } });
//   expect(inputEmail.value).toBe("email");
// });
// test("check if date input element exist", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const inputEmail: HTMLInputElement = screen.getByPlaceholderText("date");
//   expect(inputEmail).toBeInTheDocument();
// });
// test("check if user can input date", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const inputEmail: HTMLInputElement = screen.getByPlaceholderText("date");
//   fireEvent.change(inputEmail, { target: { value: "date" } });
//   expect(inputEmail.value).toBe("date");
// });

// test("check if status input element exist", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const inputEmail: HTMLInputElement = screen.getByPlaceholderText("status");
//   expect(inputEmail).toBeInTheDocument();
// });
// test("check if user can input status", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const inputEmail: HTMLInputElement = screen.getByPlaceholderText("status");
//   fireEvent.change(inputEmail, { target: { value: "status" } });
//   expect(inputEmail.value).toBe("status");
// });

// test("check button element", () => {
//   render(
//     <Router>
//       <Users />
//     </Router>
//   );
//   const elementButton: any = screen.getByTestId("btn");
//   fireEvent.click(elementButton);
//   expect(elementButton).toBeInTheDocument();
// });
